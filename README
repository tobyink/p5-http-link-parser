NAME
    HTTP::Link::Parser - parse HTTP Link headers

SYNOPSIS
      use HTTP::Link::Parser ':standard';
      use LWP::UserAgent;
  
      my $ua = LWP::UserAgent->new;
      my $response = $ua->get("http://example.com/foo");
  
      # Parse link headers into an RDF::Trine::Model.
      my $model = parse_links_into_model($response);

      # Find data about <http://example.com/foo>.
      my $iterator = $model->get_statements(
        RDF::Trine::Node::Resource->new('http://example.com/foo'),
        undef,
        undef);

      while ($statement = $iterator->next)
      {
         # Skip data where the value is not a resource (i.e. link)
         next unless $statement->object->is_resource;

         printf("Link to <%s> with rel=\"%s\".\n",
            $statement->object->uri,
            $statement->predicate->uri);
      }

VERSION
    0.05

DESCRIPTION
    HTTP::Link::Parser parses HTTP "Link" headers found in an HTTP::Response
    object. Headers should conform to the format described in the
    forthcoming IETF specification.

  Functions
    To export all functions:

      use HTTP::Link::Parser ':all';

    "$model = parse_links_into_model($response, [$existing_model])"
        Takes an HTTP::Response object (or in fact, any HTTP::Message
        object) and returns an RDF::Trine::Model containing link data
        extracted from the response. Dublin Core is used to encode
        'hreflang', 'title' and 'type' link parameters.

        $existing_model is an RDF::Trine::Model to add data to. If omitted,
        a new, empty model is created.

    "$data = parse_links_to_rdfjson($response)"
        $data is a hashref with a structure inspired by the RDF/JSON
        specification. This can be thought of as a shortcut for:

          use RDF::Trine 0.112;
          $model = parse_links_into_model($response);
          $data  = $model->as_hashref;

        But it's faster as no intermediate model is built.

    "$list = parse_links_to_list($response)"
        This function is not exported by default.

        $list is an arrayref of hashrefs. Each hashref contains keys
        corresponding to the link parameters of the link, and a key called
        'URI' corresponding to the target of the link.

        The 'rel' and 'rev' keys are arrayrefs containing lists of
        relationships. If the Link used the short form of a registered
        relationship, then the short form is present on this list. Short
        forms can be converted to long forms (URIs) using the
        "relationship_uri" function.

        The structure returned by this function should not be considered
        stable.

    "$data = parse_single_link($link, $base)"
        This function is not exported by default.

        This parses a single Link header (minus the "Link:" bit itself) into
        a hashref structure. A base URI must be included in case the link
        contains relative URIs.

        The structure returned by this function should not be considered
        stable.

    "$long = relationship_uri($short)"
        This function is not exported by default.

        It may be used to convert short strings identifying relationships,
        such as "next" and "prev", into longer URIs identifying the same
        relationships, such as
        "http://www.iana.org/assignments/relation/next" and
        "http://www.iana.org/assignments/relation/prev".

        If passed a string which is a URI already, simply returns it as-is.

BUGS
    Please report any bugs to <http://rt.cpan.org/>.

SEE ALSO
    <http://www.mnot.net/drafts/draft-nottingham-http-link-header-07.txt>

    RDF::Trine, RDF::TrineShortcuts, HTTP::Response.

    <http://n2.talis.com/wiki/RDF_JSON_Specification>.

    <http://www.perlrdf.org/>.

AUTHOR
    Toby Inkster <tobyink@cpan.org>.

COPYRIGHT AND LICENCE
    Copyright (C) 2009-2010 by Toby Inkster

  a.k.a. "The MIT Licence"
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

